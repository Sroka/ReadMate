
//UTILS

namespace global_bindings {
    string generate_pdf_uuid();
};

// DOMAIN DATA

dictionary Book {
    string uuid;
    Bitmap? thumbnail;
    PdfLoadingState loading_state;
};

interface Bitmap {
    i32 width();
    i32 height();
    string uid();
    sequence<u32> copy_pixels();
};

[Enum]
interface PdfLoadingState {
    LoadingPdf();
    ValidPdf(string title, string author, Bitmap? thumbnail);
    ErrorPdf();
};


// GLOBAL STORE

dictionary GlobalState {
    string some_text;
    sequence<Book> books;
};

[Enum]
interface GlobalAction {
    MarkPdfLoading(string uuid);
    LoadPdf(string uuid, string file_name, sequence<u8> bytes);
    MarkPdfLoadingFailed(string uuid);
};

callback interface GlobalStateListener {
    void new_state(GlobalState state);
};

interface GlobalStore {
    constructor();
    [Self=ByArc]
    void init();
    [Self=ByArc]
    void dispatch_action(GlobalAction action);
    void add_listener(string id, GlobalStateListener listener);
    void remove_listener(string id);
};

// BOOKS STORE

dictionary BooksState {
    string some_text;
    sequence<Book> books;
};

[Enum]
interface BooksSideEffect {
    OpenFilePicker();
};

[Enum]
interface BooksAction {
    AddClicked();
    MarkPdfLoading(string uuid);
    LoadPdf(string uuid, string file_name, sequence<u8> bytes);
    MarkPdfLoadingFailed(string uuid);
};

callback interface BooksStateListener {
    void new_state(BooksState state);
    void new_side_effect(BooksSideEffect side_effect);
};

interface BooksStore {
    constructor(GlobalStore global_store);
    [Self=ByArc]
    void init();
    [Self=ByArc]
    void dispatch_action(BooksAction action);
    void add_listener(string id, BooksStateListener listener);
    void remove_listener(string id);
};

// PAGES STORE

dictionary PagesState {
    sequence<string> pages;
};

[Enum]
interface PagesAction {
    LoadPages(i32 range_start, i32 range_end);
};

callback interface PagesStateListener {
    void new_state(PagesState state);
};

interface PagesStore {
    constructor(GlobalStore global_store);
    [Self=ByArc]
    void init();
    [Self=ByArc]
    void dispatch_action(PagesAction action);
    void add_listener(string id, PagesStateListener listener);
    void remove_listener(string id);
};
